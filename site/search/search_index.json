{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udded Willkommen auf Hasan's Route","text":"<p>\u201eJede Route beginnt mit einem ersten Schritt \u2013 hier beginnt deiner.\u201c</p>"},{"location":"#projektuberblick","title":"Projekt\u00fcberblick","text":"<p>Was erwartet dich auf dieser Route?</p> <p>Diese Dokumentation begleitet dich auf meinem Weg zu einer funktionierenden und sicheren Entwicklungsumgebung. Du lernst Schritt f\u00fcr Schritt, wie du deinen Ubuntu-Server vorbereitest und einen Cloudflare-Tunnel einrichtest \u2013 alles dokumentiert anhand eines echten Projekts.</p>"},{"location":"#projekthintergrund","title":"Projekthintergrund","text":"<p>Im Modul 324 haben wir ein Projekt gestartet, bei dem verschiedene Sortieralgorithmen mit Spring Boot umgesetzt wurden. Die MySQL-Datenbank speichert zu jedem Algorithmus den Namen, die Beschreibung und die Komplexit\u00e4t. Mithilfe von Insomnia testeten wir erfolgreich unsere HTTP-Endpunkte.</p> <p>Da wir bereits mit React gearbeitet hatten, entwickelten wir ein passendes Frontend:</p> <ul> <li>Ein Dropdown-Men\u00fc listet die Algorithmen aus der Datenbank</li> <li>Nach Auswahl erscheinen Beschreibung &amp; Komplexit\u00e4t</li> <li>Ein Eingabefeld erlaubt das Einf\u00fcgen eines Arrays</li> <li>Per Button wird das Array sortiert \u2013 samt Ausgabe von Sortierdauer &amp; Vergleichszahl</li> </ul> <p>Das Projekt wurde zun\u00e4chst \u00fcber Railway (Backend &amp; DB) und Netlify (Frontend) deployed. Zus\u00e4tzlich nutzten wir CI/CD-Pipelines mit GitLab.</p> <p>\ud83d\uded1 Nach kurzer Zeit lief jedoch das kostenlose Railway-Abo ab. \u2705 Unsere L\u00f6sung: Deployment von Backend &amp; Datenbank auf einem eigenen Ubuntu-Server \u2013 erfolgreich umgesetzt!</p>"},{"location":"#neue-projektphase-ziel","title":"Neue Projektphase &amp; Ziel","text":"<p>Wir arbeiteten in zwei Gruppen und fassten unser Wissen zusammen. Das Ziel: Die bisherigen Algorithmen in ein gemeinsames Maven-Projekt \u00fcberf\u00fchren und daraus eine <code>.jar</code>-Datei erstellen. Diese soll im bestehenden System integriert und dar\u00fcber ausgef\u00fchrt werden \u2013 zwei Projekte, eine gemeinsame Route.</p> <p>\ud83c\udfaf Und genau hier setzt diese Dokumentation an.</p> <p>Mit Hasan's Route m\u00f6chte ich zeigen, wie ich den Weg vom lokalen Setup bis zur Deployment- und Tunnel-L\u00f6sung gegangen bin \u2013 damit jede*r Beteiligte diesen Weg ebenfalls meistern kann.</p>"},{"location":"#etappen-der-route","title":"Etappen der Route","text":"<p>Etappe 1 &amp; 2 \u2013 SSH-Zugriff einrichten</p> <p>\ud83d\udd10 Zugriff auf deinen Server vorbereiten:</p> <ul> <li>Installation des OpenSSH-Servers</li> <li>Aktivierung des Passwort-Logins</li> <li>Verbindung \u00fcber Linux, Windows CMD, PowerShell oder PuTTY</li> </ul> <p>\ud83d\udc49 Zur Server-Konfiguration \u00bb \ud83d\udc49 Zur SSH-Anleitung \u00bb</p> <p>Etappe 3 \u2013 Cloudflare Tunnel starten</p> <p>\ud83c\udf10 Lokalen Dienst sicher erreichbar machen \u2013 ohne eigene Domain:</p> <ul> <li>Cloudflare Tunnel einrichten</li> <li>HTTPS-Zugang erzeugen</li> <li>Ausgabe in Datei speichern &amp; URL weiterverwenden</li> </ul> <p>\ud83d\udc49 Zur Tunnel-Anleitung \u00bb</p> <p>Etappe 4 \u2013 Eigene Route dokumentieren</p> <p>\ud83d\udcdd Willst du auch eine solche Website erstellen wie Hasan\u2019s Route?</p> <p>Dann zeige ich dir, wie du mit MkDocs und dem modernen Material for MkDocs-Theme deine eigene Dokumentation entwickelst \u2013 lokal im Browser und deployt \u00fcber GitHub Pages.</p> <ul> <li>MkDocs &amp; Material installieren  </li> <li>Projektstruktur aufbauen  </li> <li>Navigation und Styling konfigurieren  </li> <li>Ver\u00f6ffentlichung mit <code>mkdocs gh-deploy</code> </li> </ul> <p>\ud83d\udc49 Zur MkDocs-Anleitung \u00bb</p>"},{"location":"#so-navigierst-du-durch-die-route","title":"So navigierst du durch die Route","text":"<p>Hinweis</p> <ul> <li>Die Etappen sind unabh\u00e4ngig voneinander nutzbar</li> <li>Die Navigation erfolgt \u00fcber das Men\u00fc oder die Direktlinks</li> <li>Du kannst jederzeit zu einem sp\u00e4teren Thema springen \u2013 ganz wie bei einer echten Route</li> </ul>"},{"location":"#dein-erster-schritt","title":"Dein erster Schritt","text":"<p>Bereit? Starte mit der ersten Etappe: \ud83d\udc49 SSH auf dem Server einrichten \u00bb</p> <p>Hasan\u2019s Route</p> <p>\u201eDiese Doku soll nicht nur erkl\u00e4ren \u2013 sie soll dich begleiten.\u201c</p>"},{"location":"HowToCloudflare/","title":"\ud83c\udf10 Etappe 3 \u2013 Cloudflare Tunnel Setup (ohne Account)","text":"<p>Etappenziel</p> <p>Auf dieser Etappe deiner Route lernst du, wie du deinen lokalen Dienst \u00fcber das Internet sicher zug\u00e4nglich machst \u2013 per HTTPS, ganz ohne eigene Domain oder Cloudflare-Account.</p>"},{"location":"HowToCloudflare/#hintergrund","title":"Hintergrund","text":"<p>In unserem Projekt wurde das Frontend separat auf Netlify deployed. Da Netlify standardm\u00e4ssig HTTPS verwendet, muss auch das Backend \u00fcber HTTPS erreichbar sein, damit die Kommunikation funktioniert. Hier biegt unsere Route Richtung Cloudflare Tunnel ab.</p> <p>Cloudflare stellt uns einen tempor\u00e4ren HTTPS-Tunnel zur Verf\u00fcgung: Das Frontend kommuniziert mit Cloudflare, und Cloudflare leitet die Anfragen sicher an das lokale Backend weiter \u2013 ohne Zertifikate oder Domain.</p>"},{"location":"HowToCloudflare/#voraussetzungen","title":"Voraussetzungen","text":"<p>Was du brauchst</p> <ul> <li>\ud83d\udc27 Ein Linux-Server mit Internetzugang</li> <li>\ud83d\udd01 Ein lokal laufender Dienst auf <code>http://localhost:8080</code></li> <li>\ud83d\udce6 <code>nohup</code> installiert (standardm\u00e4ssig bei den meisten Linux-Systemen)</li> </ul>"},{"location":"HowToCloudflare/#1-cloudflare-tunnel-installieren","title":"1. Cloudflare Tunnel installieren","text":"<pre><code>wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\nsudo dpkg -i cloudflared-linux-amd64.deb\n</code></pre>"},{"location":"HowToCloudflare/#2-tunnel-im-hintergrund-starten","title":"2. Tunnel im Hintergrund starten","text":"<p>Starte den Tunnel im Hintergrund, damit er auch nach SSH-Trennung weiterl\u00e4uft:</p> <pre><code>nohup cloudflared tunnel --url http://localhost:8080 &gt; tunnel.log 2&gt;&amp;1 &amp;\n</code></pre> <p>Was passiert hier?</p> <ul> <li>nohup sorgt daf\u00fcr, dass der Tunnel im Hintergrund weiterl\u00e4uft \u2013 auch nach einer SSH-Trennung.</li> <li>Die Ausgabe (inkl. HTTPS-URL) wird in die Datei tunnel.log geschrieben.</li> </ul>"},{"location":"HowToCloudflare/#3-https-tunnel-url-auslesen","title":"3. HTTPS-Tunnel-URL auslesen","text":"<p>Verwende diesen Befehl, um die generierte URL herauszufiltern:</p> <pre><code>grep -oP 'https://.*\\.trycloudflare\\.com' tunnel.log\n</code></pre> <p>Beispielausgabe:</p> <pre><code>https://raise-operational-will-gentle.trycloudflare.com\n</code></pre> <p>\ud83d\udc49 Diese URL kannst du z.\u202fB. im Frontend (Netlify) eintragen, um das Backend erreichbar zu machen.</p>"},{"location":"HowToCloudflare/#hinweis-zur-etappe","title":"Hinweis zur Etappe","text":"<p>Nur tempor\u00e4r!</p> <p>Der hier genutzte \"Account-less\"-Tunnel ist nur f\u00fcr tempor\u00e4re Tests gedacht. Er ist nicht garantiert verf\u00fcgbar, nicht wiederverwendbar und nicht f\u00fcr Produktivsysteme geeignet.</p> <p>F\u00fcr einen stabilen, benannten Tunnel solltest du ein Cloudflare-Konto nutzen.</p>"},{"location":"HowToCloudflare/#weitere-infos","title":"Weitere Infos","text":"<p>\ud83d\udc49 Cloudflare Tunnel Quickstart</p>"},{"location":"HowToMkdocs/","title":"\ud83d\udcd8 Etappe 4 \u2013 Dokumentation mit MkDocs + Material","text":"<p>Ziel dieser Etappe</p> <p>Auf dieser Etappe deiner Route lernst du, wie du ein eigenes Dokumentationsprojekt mit MkDocs und dem beliebten Theme Material for MkDocs aufsetzt \u2013 lokal und \u00f6ffentlich \u00fcber GitHub Pages.</p> <p>MkDocs ist ein statischer Website-Generator, der speziell f\u00fcr technische Dokumentationen gedacht ist. Du schreibst in Markdown und erh\u00e4ltst eine elegante Webseite \u2013 ideal f\u00fcr Teams, Projekte oder Lernpfade wie diesen.</p> <p>Die wichtigsten Merkmale von MkDocs:</p> <p>\u2705 Einfacher Einstieg: Du schreibst deine Inhalte in Markdown (<code>.md</code>) \u2013 leicht zu lernen und schnell zu schreiben.</p> <p>\ud83d\udcc1 Struktur: Die Seiten liegen in einem <code>docs/</code>-Verzeichnis. Die Navigation steuerst du \u00fcber eine <code>mkdocs.yml</code>.</p> <p>\ud83c\udfa8 Design &amp; Themes: MkDocs bringt ein modernes Standard-Theme mit. Besonders beliebt ist das Material for MkDocs.</p> <p>\ud83d\ude80 Live-Vorschau: Mit <code>mkdocs serve</code> startest du einen lokalen Entwicklungsserver, der \u00c4nderungen automatisch anzeigt.</p> <p>\ud83d\udee0\ufe0f Deployment: Ideal zur Ver\u00f6ffentlichung auf GitHub Pages mit dem Befehl <code>mkdocs gh-deploy</code>.</p>"},{"location":"HowToMkdocs/#hintergrund","title":"Hintergrund","text":"<p>Im Rahmen des Moduls 324 f\u00fchren wir zwei bestehende Algorithmen-Projekte zusammen. Da das Frontend \u00fcber Netlify und das Backend \u00fcber einen Ubuntu-Server betrieben wird, war eine zentrale, leicht zug\u00e4ngliche Dokumentation notwendig.</p> <p>Damit sich alle Beteiligten entlang der gleichen Route bewegen k\u00f6nnen, wurde diese Dokumentation erstellt und via GitHub Pages ver\u00f6ffentlicht.</p>"},{"location":"HowToMkdocs/#voraussetzungen","title":"Voraussetzungen","text":"<p>Du brauchst</p> <ul> <li>Python 3.x installiert</li> <li>GitHub-Account</li> <li>Git &amp; VS Code empfohlen</li> </ul>"},{"location":"HowToMkdocs/#1-mkdocs-material-installieren","title":"1. MkDocs &amp; Material installieren","text":"<p>Installiere MkDocs und das Material-Theme mit:</p> <pre><code>python -m pip install --upgrade pip\npython -m pip install mkdocs-material --user\n</code></pre>"},{"location":"HowToMkdocs/#2-projektstruktur-anlegen","title":"2. Projektstruktur anlegen","text":"<p>Starte ein neues Projekt:</p> <pre><code>mkdocs new mein-projekt\ncd mein-projekt\n</code></pre> <p>Struktur:</p> <pre><code>mein-projekt/\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 index.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"HowToMkdocs/#3-mkdocsyml-konfigurieren","title":"3. <code>mkdocs.yml</code> konfigurieren","text":"<pre><code>site_name: Mein Projekt\ntheme:\n  name: material\n  language: de\n  palette:\n    scheme: default\n    primary: blue\n    accent: light blue\nmarkdown_extensions:\n  - admonition\n  - attr_list\n  - toc:\n      permalink: true\n  - pymdownx.superfences\n  - pymdownx.emoji\n  - pymdownx.details\n</code></pre>"},{"location":"HowToMkdocs/#4-lokale-vorschau-starten","title":"4. Lokale Vorschau starten","text":"<pre><code>python -m mkdocs serve\n</code></pre> <p>\ud83d\udc49 \u00d6ffne <code>http://127.0.0.1:8000</code> im Browser</p>"},{"location":"HowToMkdocs/#5-deployment-auf-github-pages","title":"5. Deployment auf GitHub Pages","text":"<ol> <li>Repository auf GitHub erstellen</li> <li>Projekt pushen</li> <li>GitHub Pages aktivieren (Branch: <code>gh-pages</code>)</li> <li>Deployment ausf\u00fchren:</li> </ol> <pre><code>python -m mkdocs gh-deploy\n</code></pre>"},{"location":"HowToMkdocs/#bonus-tipps","title":"Bonus-Tipps","text":"<ul> <li>Nutze <code>!!! info</code>, <code>!!! tip</code>, <code>!!! warning</code> f\u00fcr sch\u00f6ne Hinweise</li> <li>Erstelle mehrere <code>.md</code>-Dateien unter <code>docs/</code> und binde sie \u00fcber <code>nav:</code> im <code>mkdocs.yml</code> ein</li> <li>F\u00fcr Emojis einfach <code>:emoji:</code> oder Unicode-Symbole verwenden</li> </ul>"},{"location":"HowToMkdocs/#weitere-links","title":"Weitere Links","text":"<ul> <li>Material for MkDocs</li> <li>MkDocs Doku</li> </ul>"},{"location":"HowToSSH%28Server%29/","title":"\ud83d\udd10 Etappe 1 \u2013 SSH-Zugriff per Passwort (ohne Public Key)","text":"<p>Etappenziel</p> <p>Diese Etappe auf Hasan\u2019s Route f\u00fchrt dich zur Vorbereitung deines Ubuntu-Servers f\u00fcr den SSH-Zugriff \u2013 per Passwort, ganz ohne Public-Key-Konfiguration.</p>"},{"location":"HowToSSH%28Server%29/#hintergrund","title":"Hintergrund","text":"<p>Unsere Route startete urspr\u00fcnglich mit Railway, wo Backend und Datenbank gehostet wurden. Als das Test-Abo endete, bogen wir auf einen neuen Pfad ab: ein eigener Ubuntu-Server.  </p> <p>Da unsere CI/CD-Pipeline direkten Zugriff auf den Server ben\u00f6tigt, ist der SSH-Zugriff ein zentraler Wegpunkt auf dem Deployment-Weg.</p>"},{"location":"HowToSSH%28Server%29/#1-openssh-server-installieren","title":"1. OpenSSH-Server installieren","text":"<p>F\u00fchre auf dem Ubuntu-Server folgende Befehle aus:</p> <pre><code>sudo apt update\nsudo apt install openssh-server -y\n</code></pre> <p>Pr\u00fcfe anschliessend, ob der Dienst l\u00e4uft:</p> <pre><code>sudo systemctl status ssh\n</code></pre> <p>Falls nicht aktiv, starte den Dienst und aktiviere den Autostart:</p> <pre><code>sudo systemctl enable --now ssh\n</code></pre>"},{"location":"HowToSSH%28Server%29/#2-passwort-login-aktivieren","title":"2. Passwort-Login aktivieren","text":"<p>Bearbeite die Konfigurationsdatei:</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> <p>Suche und \u00e4ndere (oder erg\u00e4nze) folgende Zeilen:</p> <pre><code>PasswordAuthentication yes\nPermitRootLogin no\n</code></pre> <p>Sicherheit</p> <p><code>PermitRootLogin no</code> verhindert direkte Root-Logins \u2013 das erh\u00f6ht die Sicherheit.</p> <p>Speichere und schliesse die Datei (<code>CTRL + O</code>, <code>Enter</code>, dann <code>CTRL + X</code>).</p>"},{"location":"HowToSSH%28Server%29/#3-ssh-dienst-neu-starten","title":"3. SSH-Dienst neu starten","text":"<pre><code>sudo systemctl restart ssh\n</code></pre>"},{"location":"HowToSSH%28Server%29/#4-passwort-fur-benutzer-setzen","title":"4. Passwort f\u00fcr Benutzer setzen","text":"<p>Falls der Benutzer noch kein Passwort hat:</p> <pre><code>sudo passwd dein-benutzername\n</code></pre> <p>Beispiel:</p> <pre><code>sudo passwd wiss\n</code></pre>"},{"location":"HowToSSH%28Server%29/#5-verbindung-testen","title":"5. Verbindung testen","text":"<p>Von einem Client aus (Linux, macOS oder Windows PowerShell/CMD):</p> <pre><code>ssh wiss@&lt;server-ip&gt;\n</code></pre> <p>Gib das gesetzte Passwort ein \u2013 und du bist verbunden \u2705</p>"},{"location":"HowToSSH%28Server%29/#6-verbindungsdaten-fur-externen-zugriff-ermitteln","title":"6. Verbindungsdaten f\u00fcr externen Zugriff ermitteln","text":"<p>Um dich von ausserhalb deines Netzwerks (z.\u202fB. von Zuhause auf den Schulserver) per SSH zu verbinden, brauchst du:</p> <ul> <li>die \u00f6ffentliche IP-Adresse deines Servers</li> <li>den Benutzernamen, unter dem du dich einloggst</li> <li>ggf. eine Portfreigabe im Router oder der Firewall</li> </ul>"},{"location":"HowToSSH%28Server%29/#offentliche-ip-adresse-herausfinden","title":"\u00d6ffentliche IP-Adresse herausfinden","text":"<p>Auf dem Server:</p> <pre><code>curl ifconfig.me\n</code></pre> <p>Beispielausgabe:</p> <pre><code>31.123.45.67\n</code></pre> <p>Diese IP-Adresse verwendest du auf dem Client (Laptop, Heim-PC) f\u00fcr den SSH-Zugriff.</p>"},{"location":"HowToSSH%28Server%29/#benutzername-anzeigen","title":"Benutzername anzeigen","text":"<pre><code>whoami\n</code></pre> <p>Damit erh\u00e4ltst du den Benutzernamen (z.\u202fB. <code>wiss</code>), den du beim Verbindungsaufbau ben\u00f6tigst.</p>"},{"location":"HowToSSH%28Server%29/#zusatzliche-voraussetzungen-fur-externen-zugriff","title":"Zus\u00e4tzliche Voraussetzungen f\u00fcr externen Zugriff","text":"<p>Damit der Zugriff von aussen funktioniert, beachte Folgendes:</p> <ul> <li>Der Server muss \u00fcber das Internet erreichbar sein (z.\u202fB. durch eine \u00f6ffentliche IP oder Portweiterleitung)</li> <li>Port 22 (SSH) muss in der Firewall freigegeben sein</li> <li>Falls der Server hinter einem Router steht: Portweiterleitung einrichten (<code>TCP 22</code> \u2192 Server-IP im LAN)</li> </ul> <p>Achtung bei Schulnetzwerken</p> <p>In Schul- oder Firmennetzwerken kann der Zugriff durch Firewalls oder NAT blockiert sein. In solchen F\u00e4llen kann ein externer SSH-Zugang \u00fcber einen Tunnel (z.\u202fB. Cloudflare Tunnel) n\u00f6tig sein.</p>"},{"location":"HowToSSH%28Server%29/#verbindung-von-aussen","title":"Verbindung von aussen","text":"<p>Auf dem Client:</p> <pre><code>ssh wiss@31.123.45.67\n</code></pre> <p>Mit dem vorher gesetzten Passwort einloggen \u2013 und los geht\u2019s!</p>"},{"location":"HowToSSH%28Server%29/#hinweis-zur-sicherheit","title":"\u26a0\ufe0f Hinweis zur Sicherheit","text":"<p>Nicht f\u00fcr produktive Systeme empfohlen</p> <p>Die Anmeldung per Passwort ist einfach, aber deutlich unsicherer als die Public-Key-Authentifizierung. F\u00fcr produktive Server wird dringend empfohlen, auf Public-Key-Login umzustellen.</p> <p>Zur n\u00e4chsten Etappe</p> <p>\ud83d\udc49 SSH-Zugriff zum Ununtu-Server \u00bb</p>"},{"location":"HowToSSH/","title":"\ud83d\udd10 Etappe 2 \u2013 SSH-Zugriff zum Ubuntu-Server","text":"<p>Etappenziel</p> <p>Bevor du dich auf deiner Route per SSH mit dem Server verbindest, lernst du hier, wie du unter Linux oder Windows OpenSSH installierst und dich per Passwort sicher anmeldest \u2013 ganz ohne Public-Key-Konfiguration.</p>"},{"location":"HowToSSH/#hintergrund","title":"Hintergrund","text":"<p>Diese Etappe deiner Route f\u00fchrt dich zu einem entscheidenden Ausgangspunkt: dem Zugang zu deinem Server.</p> <p>Bevor du ein neues Projekt startest oder ein laufendes System anpasst, brauchst du Zugriff auf den Server. Der SSH-Zugriff ist dabei der erste technische Schritt \u2013 sozusagen das Eingangstor auf deinem Deployment-Weg.</p> <p>Du lernst, wie du dich per Passwort-Anmeldung sicher mit einem Ubuntu-Server verbindest, den wir zuvor entsprechend vorbereitet haben \u2013 ganz ohne SSH-Keys. Besonders praktisch, wenn du schnell loslegen, etwas \u00fcberpr\u00fcfen oder manuell eingreifen m\u00f6chtest.</p> <p>Egal ob du mit Linux, Windows PowerShell, CMD oder PuTTY arbeitest \u2013 hier erf\u00e4hrst du, wie du dich unkompliziert und passwortbasiert verbindest.</p>"},{"location":"HowToSSH/#fur-linux","title":"F\u00fcr Linux","text":"<p>1. OpenSSH Client installieren</p> <p>Installiere den SSH-Client mit folgendem Befehl:</p> <pre><code>sudo apt update\nsudo apt install openssh-client -y\n</code></pre> <p>Pr\u00fcfe danach, ob SSH korrekt installiert wurde:</p> <pre><code>ssh -V\n</code></pre> <p>2. Verbindung mit dem Server herstellen</p> <p>Beispiel:</p> <pre><code>ssh wiss@31.XXX.XXX.XXX\n</code></pre>"},{"location":"HowToSSH/#fur-windows","title":"F\u00fcr Windows","text":""},{"location":"HowToSSH/#option-1-powershell-cmd-openssh-vorinstalliert","title":"Option 1: PowerShell / CMD (OpenSSH vorinstalliert)","text":"<ol> <li>\u00d6ffne PowerShell oder CMD</li> <li>Verbinde dich mit dem Server:</li> </ol> <pre><code>ssh wiss@31.XXX.XXX.XXX\n</code></pre>"},{"location":"HowToSSH/#option-2-ssh-wird-nicht-erkannt","title":"Option 2: <code>ssh</code> wird nicht erkannt","text":"<p>OpenSSH Client aktivieren</p> <ol> <li>\u00d6ffne: Einstellungen \u2192 Apps \u2192 Optionale Features</li> <li>Suche nach OpenSSH Client</li> <li>Installiere ihn, falls nicht vorhanden</li> <li>Danach wie gewohnt verbinden:</li> </ol> <pre><code>ssh wiss@31.XXX.XXX.XXX\n</code></pre>"},{"location":"HowToSSH/#option-3-mit-putty-grafisch","title":"Option 3: Mit PuTTY (grafisch)","text":"<ol> <li>Lade PuTTY herunter: https://www.putty.org/</li> <li>\u00d6ffne PuTTY</li> <li>Trage ein:</li> <li>Host Name: <code>31.XXX.XXX.XXX</code></li> <li>Port: <code>22</code></li> <li>Connection type: <code>SSH</code></li> <li>Klicke auf Open</li> <li>Melde dich an:</li> <li>Benutzername: <code>wiss</code></li> <li>Passwort: <code>XXXX</code></li> </ol>"},{"location":"HowToSSH/#erfolgreiche-verbindung","title":"Erfolgreiche Verbindung","text":"<p>Wenn alles geklappt hat, siehst du etwas wie:</p> <pre><code>Welcome to Ubuntu ...\n</code></pre> <p>Du bist nun per SSH mit dem Server verbunden.</p>"}]}