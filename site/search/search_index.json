{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udded Willkommen auf Hasan's Route","text":"<p>\u201eJede Route beginnt mit einem ersten Schritt \u2013 hier beginnt deiner.\u201c</p>"},{"location":"#projektuberblick","title":"\ud83d\udea7 Projekt\u00fcberblick","text":"<p>Was erwartet dich auf dieser Route?</p> <p>Diese Dokumentation begleitet dich auf meinem Weg zu einer funktionierenden und sicheren Entwicklungsumgebung. Du lernst Schritt f\u00fcr Schritt, wie du deinen Ubuntu-Server vorbereitest, einen Cloudflare-Tunnel einrichtest und sp\u00e4ter auch eine CI/CD-Pipeline realisierst.</p> <p>Alle Stationen dieser Route sind modular aufgebaut \u2013 du kannst jederzeit einsteigen oder gezielt bestimmte Etappen ansteuern.</p>"},{"location":"#etappen-der-route","title":"\ud83d\udee4\ufe0f Etappen der Route","text":"<p>Etappe 1 \u2013 SSH-Zugriff einrichten</p> <p>\ud83d\udd10 Zugriff auf deinen Server vorbereiten:</p> <ul> <li>Installation des OpenSSH-Servers</li> <li>Aktivierung des Passwort-Logins</li> <li>Verbindung \u00fcber Linux, Windows CMD, PowerShell oder PuTTY</li> </ul> <p>\ud83d\udc49 Zur SSH-Anleitung \u00bb \ud83d\udc49 Zur Server-Konfiguration \u00bb</p> <p>Etappe 2 \u2013 Cloudflare Tunnel starten</p> <p>\ud83c\udf10 Lokalen Dienst sicher erreichbar machen \u2013 ohne eigene Domain:</p> <ul> <li>Cloudflare Tunnel einrichten</li> <li>HTTPS-Zugang erzeugen</li> <li>Ausgabe in Datei speichern &amp; URL weiterverwenden</li> </ul> <p>\ud83d\udc49 Zur Tunnel-Anleitung \u00bb</p>"},{"location":"#so-navigierst-du-durch-die-route","title":"\ud83d\uddfa\ufe0f So navigierst du durch die Route","text":"<p>Hinweis</p> <ul> <li>Die Etappen sind unabh\u00e4ngig voneinander nutzbar  </li> <li>Die Navigation erfolgt \u00fcber das Men\u00fc oder die Direktlinks  </li> <li>Du kannst jederzeit zu einem sp\u00e4teren Thema springen \u2013 ganz wie bei einer echten Route</li> </ul>"},{"location":"#dein-erster-schritt","title":"\ud83d\ude80 Dein erster Schritt","text":"<p>Bereit? Starte mit der ersten Etappe: \ud83d\udc49 SSH-Zugriff einrichten \u00bb</p> <p>Hasan\u2019s Route</p> <p>\u201eDiese Doku soll nicht nur erkl\u00e4ren \u2013 sie soll dich begleiten.\u201c</p>"},{"location":"HowToCloudflare/","title":"\ud83c\udf10 Cloudflare Tunnel Setup (ohne Account)","text":"<p>Auf dieser Etappe der Route geht es darum, deinen lokalen Dienst \u00fcber das Internet sicher zug\u00e4nglich zu machen \u2013 per HTTPS, ohne eigene Domain.</p> <p>Diese Anleitung zeigt dir, wie du mit Cloudflare Tunnel einen tempor\u00e4ren, verschl\u00fcsselten Zugang zu deinem lokalen Backend einrichtest und den Dienst dabei im Hintergrund betreibst.</p> <p>In unserem Projekt wurde das Frontend separat auf Netlify deployed. Da Netlify standardm\u00e4ssig HTTPS verwendet, muss auch das Backend \u00fcber HTTPS erreichbar sein, damit die Kommunikation zwischen Frontend und Backend funktioniert. Hier biegt unsere Route Richtung Cloudflare ab.</p> <p>Cloudflare erstellt f\u00fcr uns einen HTTPS-Tunnel: Das Frontend spricht mit Cloudflare, und Cloudflare leitet die Anfragen sicher an unser Backend weiter \u2013 ganz ohne Domain und Zertifikatsaufwand.</p> <p>Da dieser Tunnel nur w\u00e4hrend der Laufzeit aktiv ist, starten wir ihn im Hintergrund. Die dabei generierte HTTPS-URL wird im Terminal ausgegeben. Weil das Terminal beim Hintergrundstart nicht sichtbar ist, speichern wir die Ausgabe automatisch in eine Datei. So k\u00f6nnen wir die Tunnel-URL sp\u00e4ter gezielt auslesen und z.\u202fB. im Frontend verwenden.</p>"},{"location":"HowToCloudflare/#voraussetzungen","title":"Voraussetzungen","text":"<ul> <li>Ein Linux-Server mit Internetzugang</li> <li>Lokaler Dienst l\u00e4uft unter http://localhost:8080</li> <li>nohup ist installiert (Standard bei den meisten Linux-Systemen)</li> </ul>"},{"location":"HowToCloudflare/#1-cloudflare-installieren","title":"1. Cloudflare installieren","text":"<pre><code>wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\nsudo dpkg -i cloudflared-linux-amd64.deb\n</code></pre>"},{"location":"HowToCloudflare/#2-tunnel-im-hintergrund-starten","title":"2. Tunnel im Hintergrund starten","text":"<p>F\u00fchre folgenden Befehl aus, um den Tunnel im Hintergrund zu starten:</p> <pre><code>nohup cloudflared tunnel --url http://localhost:8080 &gt; tunnel.log 2&gt;&amp;1 &amp;\n</code></pre> <p>Erkl\u00e4rung:</p> <ul> <li>nohup sorgt daf\u00fcr, dass der Tunnel im Hintergrund weiterl\u00e4uft \u2013 auch nach einer SSH-Trennung.</li> <li>Die Ausgabe (inkl. HTTPS-URL) wird in die Datei tunnel.log geschrieben.</li> </ul>"},{"location":"HowToCloudflare/#3-tunnel-url-auslesen","title":"3. Tunnel-URL auslesen","text":"<p>Um die erzeugte HTTPS-Adresse zu finden, verwende:</p> <pre><code>grep -oP 'grep -oP 'https://.*\\.trycloudflare\\.com' tunnel.log\n</code></pre> <p>Beispielausgabe:</p> <pre><code>https://raise-operational-will-gentle.trycloudflare.com\n</code></pre> <p>Diese URL kann z.\u202fB. im Frontend eingetragen werden, um das Backend erreichbar zu machen.</p>"},{"location":"HowToCloudflare/#hinweis","title":"\u26a0\ufe0f Hinweis","text":"<p>Dieser \u201eAccount-less\u201c-Tunnel ist nur tempor\u00e4r und hat keine Garantien bez\u00fcglich Verf\u00fcgbarkeit oder Wiederverwendbarkeit. F\u00fcr den produktiven Einsatz sollte ein benannter Tunnel mit Cloudflare-Account erstellt werden.</p> <p>Weitere Informationen: \ud83d\udc49 Cloudflare Tunnel Quickstart</p>"},{"location":"HowToSSH%28Server%29/","title":"\ud83d\udd10 SSH-Zugriff per Passwort (ohne Public Key)","text":"<p>Diese Etappe auf Hasan\u2019s Route f\u00fchrt dich zur Vorbereitung deines Ubuntu-Servers f\u00fcr den SSH-Zugriff \u2013 per Passwort, ganz ohne Public-Key-Konfiguration.</p> <p>Unsere Route startete urspr\u00fcnglich mit Railway, wo Backend und Datenbank gehostet wurden. Als das Test-Abo endete, bogen wir auf einen neuen Pfad ab: ein eigener Ubuntu-Server. In diesem Abschnitt erf\u00e4hrst du, wie du ihn f\u00fcr den sicheren Fernzugriff vorbereitest.</p> <p>Da unsere CI/CD-Pipeline direkten Zugriff auf den Server ben\u00f6tigt, ist dieser SSH-Zugriff ein zentraler Wegpunkt auf dem Deployment-Weg.</p>"},{"location":"HowToSSH%28Server%29/#1-openssh-server-installieren","title":"1. OpenSSH-Server installieren","text":"<p>F\u00fchre auf dem Ubuntu-Server folgende Befehle aus:</p> <pre><code>sudo apt update\nsudo apt install openssh-server -y\n</code></pre> <p>Anschliessend pr\u00fcfen, ob der Dienst l\u00e4uft:</p> <pre><code>sudo systemctl status ssh\n</code></pre> <p>Wenn nicht aktiv: Dienst starten und beim Boot aktivieren:</p> <pre><code>sudo systemctl enable --now ssh\n</code></pre>"},{"location":"HowToSSH%28Server%29/#2-ssh-fur-passwort-login-konfigurieren","title":"2. SSH f\u00fcr Passwort-Login konfigurieren","text":"<p>\u00d6ffne die SSH-Konfigurationsdatei:</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> <p>Suche und \u00e4ndere (bzw. erg\u00e4nze) folgende Zeilen:</p> <pre><code>PasswordAuthentication yes\nPermitRootLogin no\n</code></pre> <p>\ud83d\udca1 <code>PermitRootLogin</code> sollte auf <code>no</code> gesetzt sein, um direkte Root-Logins zu verhindern. Datei speichern und schliessen.</p>"},{"location":"HowToSSH%28Server%29/#3-ssh-dienst-neu-starten","title":"3. SSH-Dienst neu starten","text":"<pre><code>sudo systemctl restart ssh\n</code></pre>"},{"location":"HowToSSH%28Server%29/#4-passwort-fur-benutzer-setzen","title":"4. Passwort f\u00fcr Benutzer setzen","text":"<p>Falls der Benutzer noch kein Passwort hat, kannst du eins vergeben:</p> <pre><code>sudo passwd dein-benutzername\n</code></pre>"},{"location":"HowToSSH%28Server%29/#5-verbindung-herstellen","title":"5. Verbindung herstellen","text":"<p>Von einem Client aus (Linux, macOS, Windows PowerShell/CMD):</p> <pre><code>ssh wiss@&lt;server-ip&gt;\n</code></pre> <p>Gib das gesetzte Passwort ein und du bist verbunden.</p>"},{"location":"HowToSSH%28Server%29/#hinweis","title":"\u26a0\ufe0f Hinweis","text":"<p>Die Anmeldung per Passwort ist einfach, aber weniger sicher als Public-Key-Authentifizierung. F\u00fcr produktive Systeme wird dringend empfohlen, stattdessen auf Public-Key-Login umzustellen.</p>"},{"location":"HowToSSH/","title":"\ud83d\udd10 SSH-Zugriff auf den Ubuntu-Server (f\u00fcr neue Benutzer)","text":"<p>Bevor du dich auf deiner Route per SSH mit dem Server verbindest, lernst du hier, wie du unter Linux oder Windows OpenSSH installierst und dich per Passwort sicher anmeldest \u2013 ohne Public-Key-Konfiguration.</p>"},{"location":"HowToSSH/#fur-linux","title":"F\u00fcr Linux","text":""},{"location":"HowToSSH/#1-openssh-client-installieren","title":"1. OpenSSH Client installieren","text":"<pre><code>sudo apt update\nsudo apt install openssh-client -y\n</code></pre> <p>Pr\u00fcfen, ob SSH installiert ist:</p> <pre><code>ssh -V\n</code></pre>"},{"location":"HowToSSH/#2-verbindung-mit-dem-server-herstellen","title":"2. Verbindung mit dem Server herstellen","text":"<p>bsp.</p> <pre><code>ssh wiss@31.XXX.XXX.XXX\n</code></pre>"},{"location":"HowToSSH/#fur-windows","title":"F\u00fcr Windows","text":""},{"location":"HowToSSH/#1-windows","title":"1. Windows","text":"<ol> <li>\u00d6ffne PowerShell oder CMD</li> <li>Verbinde dich mit dem Server:</li> </ol> <p>bsp.</p> <pre><code>ssh wiss@31.XXX.XXX.XXX\n</code></pre>"},{"location":"HowToSSH/#2-ssh-nicht-erkannt","title":"2. <code>ssh</code> nicht erkannt","text":"<ol> <li>Gehe zu Einstellungen \u2192 Apps \u2192 Optionale Features</li> <li>Installiere OpenSSH Client</li> <li>Danach:</li> </ol> <p>bsp.</p> <pre><code>ssh wiss@31.XXX.XXX.XXX\n</code></pre>"},{"location":"HowToSSH/#3-mit-putty","title":"3. Mit PuTTY","text":"<ol> <li>Lade PuTTY herunter: https://www.putty.org/</li> <li>\u00d6ffne PuTTY</li> <li>Gib ein:</li> <li>Host Name: <code>31.XXX.XXX.XXX</code></li> <li>Port: <code>22</code></li> <li>Connection type: SSH</li> <li>Klicke auf Open</li> <li>Melde dich an:</li> <li>Benutzer: <code>wiss</code></li> <li>Passwort: <code>XXXX</code></li> </ol>"},{"location":"HowToSSH/#erfolgreiche-verbindung","title":"Erfolgreiche Verbindung","text":"<p>Wenn alles geklappt hat, erscheint:</p> <pre><code>Welcome to Ubuntu ...\n</code></pre> <p>Du bist nun per SSH mit dem Server verbunden.</p>"}]}