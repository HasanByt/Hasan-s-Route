{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Willkommen zu Hasan's Route \ud83d\udc4b","text":"<p>Diese Dokumentation zeigt dir, wie ich die folgenden Themen umgesetzt habe - kompakt, verst\u00e4ndlich und direkt anwendbar.</p>"},{"location":"#server-zugriff-mit-ssh","title":"\ud83d\udd10 Server-Zugriff mit SSH","text":"<p>Erfahre Schritt f\u00fcr Schritt, wie du deinen Ubuntu-Server f\u00fcr den entfernten Zugriff vorbereitest, inklusive:</p> <ul> <li>Installation des OpenSSH-Servers</li> <li>Aktivierung des Passwort-Logins</li> <li>Verbindung \u00fcber Linux, Windows CMD, PowerShell oder PuTTY</li> </ul> <p>Diese Methode kommt zum Einsatz, weil unser urspr\u00fcnglicher Hosting-Service (Railway) nur begrenzt verf\u00fcgbar war. Nach Ablauf des Testzeitraums haben wir einen eigenen Ubuntu-Server verwendet. Mit dieser Anleitung kannst du dich per SSH verbinden \u2013 auch ohne SSH-Key.</p> <p>\ud83d\udc49 Zur Anleitung \u00bb  \ud83d\udc49 Zur Server Anleitung \u00bb </p>"},{"location":"#cloudflare-tunnel-einrichten","title":"\ud83c\udf10 Cloudflare Tunnel einrichten","text":"<p>Lerne, wie du mit Cloudflare einen HTTPS-Tunnel f\u00fcr deinen lokalen Server einrichtest \u2013 ohne Account oder eigene Domain.</p> <p>Das ist besonders n\u00fctzlich, wenn dein Frontend (z.\u202fB. auf Netlify gehostet) \u00fcber HTTPS l\u00e4uft und mit dem Backend kommunizieren soll, das lokal oder auf einem internen Server l\u00e4uft.</p> <p>\ud83d\udc49 Zur Anleitung \u00bb</p>"},{"location":"HowToCloudfare/","title":"Cloudflare Tunnel Setup (ohne Account)","text":"<p>Diese Anleitung beschreibt, wie ein Cloudflare-Tunnel eingerichtet und im Hintergrund betrieben wird, sodass man \u00fcber eine \u00f6ffentliche HTTPS-URL auf einen lokalen Dienst zugreifen kann.</p> <p>In unserem Projekt wurde das Frontend separat auf Netlify deployed. Da Netlify standardm\u00e4ssig HTTPS verwendet, muss auch das Backend \u00fcber HTTPS erreichbar sein, damit die Kommunikation zwischen Frontend und Backend funktioniert. Hier kommt Cloudflare ins Spiel.</p> <p>Cloudflare erstellt f\u00fcr uns einen HTTPS-Tunnel: Das Frontend kommuniziert mit Cloudflare, und Cloudflare leitet die Anfragen an unser Backend weiter.</p> <p>Da dieser Dienst und die zugeh\u00f6rige URL nur w\u00e4hrend der Laufzeit zur Verf\u00fcgung stehen, betreiben wir den Tunnel im Hintergrund. Beim Start wird die HTTPS-URL im Terminal ausgegeben. Da wir den Dienst im Hintergrund starten und das Terminal nicht einsehen k\u00f6nnen, speichern wir die Ausgabe in eine Datei. So k\u00f6nnen wir die URL sp\u00e4ter aus der Datei auslesen.</p>"},{"location":"HowToCloudfare/#voraussetzungen","title":"Voraussetzungen","text":"<ul> <li>Ein Linux-Server mit Internetzugang</li> <li>Lokaler Dienst l\u00e4uft unter http://localhost:8080</li> <li>nohup ist installiert (Standard bei den meisten Linux-Systemen)</li> </ul>"},{"location":"HowToCloudfare/#1-cloudflare-installieren","title":"1. Cloudflare installieren","text":"<pre><code>wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\nsudo dpkg -i cloudflared-linux-amd64.deb\n</code></pre>"},{"location":"HowToCloudfare/#2-tunnel-im-hintergrund-starten","title":"2. Tunnel im Hintergrund starten","text":"<p>F\u00fchre folgenden Befehl aus, um den Tunnel im Hintergrund zu starten:</p> <pre><code>nohup cloudflared tunnel --url http://localhost:8080 &gt; tunnel.log 2&gt;&amp;1 &amp;\n</code></pre> <p>Erkl\u00e4rung:</p> <ul> <li>nohup sorgt daf\u00fcr, dass der Tunnel im Hintergrund weiterl\u00e4uft \u2013 auch nach einer SSH-Trennung.</li> <li>Die Ausgabe (inkl. HTTPS-URL) wird in die Datei tunnel.log geschrieben.</li> </ul>"},{"location":"HowToCloudfare/#3-tunnel-url-auslesen","title":"3. Tunnel-URL auslesen","text":"<p>Um die erzeugte HTTPS-Adresse zu finden, verwende:</p> <pre><code>grep -oP 'grep -oP 'https://.*\\.trycloudflare\\.com' tunnel.log\n</code></pre> <p>Beispielausgabe:</p> <pre><code>https://raise-operational-will-gentle.trycloudflare.com\n</code></pre> <p>Diese URL kann z.\u202fB. im Frontend eingetragen werden, um das Backend erreichbar zu machen.</p>"},{"location":"HowToCloudfare/#hinweis","title":"Hinweis","text":"<p>Dieser \u201eAccount-less\u201c-Tunnel ist nur tempor\u00e4r und hat keine Garantien bez\u00fcglich Verf\u00fcgbarkeit oder Wiederverwendbarkeit. F\u00fcr den produktiven Einsatz sollte ein benannter Tunnel mit Cloudflare-Account erstellt werden.</p> <p>Weitere Informationen: \ud83d\udc49 Cloudflare Tunnel Quickstart</p>"},{"location":"HowToSSH%28Server%29/","title":"\ud83d\udd10 SSH-Zugriff per Passwort (ohne Public Key)","text":"<p>In diesem Abschnitt lernst du, wie du deinen Ubuntu-Server f\u00fcr den SSH-Zugriff vorbereitest \u2013 mit Passwort-Anmeldung, ganz ohne Public-Key-Konfiguration.</p> <p>Im Projekt wurde anfangs Railway f\u00fcr das Hosting des Backends und der MySQL-Datenbank verwendet. Da das Test-Abo jedoch nach kurzer Zeit ablief, wurde stattdessen ein Ubuntu-Server zur Verf\u00fcgung gestellt. Mit dieser Anleitung erf\u00e4hrst du, wie du den Server f\u00fcr den Fernzugriff per SSH vorbereitest.</p>"},{"location":"HowToSSH%28Server%29/#1-openssh-server-installieren","title":"1. OpenSSH-Server installieren","text":"<p>F\u00fchre auf dem Ubuntu-Server folgende Befehle aus:</p> <pre><code>sudo apt update\nsudo apt install openssh-server -y\n</code></pre> <p>Anschliessend pr\u00fcfen, ob der Dienst l\u00e4uft:</p> <pre><code>sudo systemctl status ssh\n</code></pre> <p>Wenn nicht aktiv: Dienst starten und beim Boot aktivieren:</p> <pre><code>sudo systemctl enable --now ssh\n</code></pre>"},{"location":"HowToSSH%28Server%29/#2-ssh-fur-passwort-login-konfigurieren","title":"2. SSH f\u00fcr Passwort-Login konfigurieren","text":"<p>\u00d6ffne die SSH-Konfigurationsdatei:</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> <p>Suche und \u00e4ndere (bzw. erg\u00e4nze) folgende Zeilen:</p> <pre><code>PasswordAuthentication yes\nPermitRootLogin no\n</code></pre> <p>\ud83d\udca1 <code>PermitRootLogin</code> sollte auf <code>no</code> gesetzt sein, um direkte Root-Logins zu verhindern. Datei speichern und schliessen.</p>"},{"location":"HowToSSH%28Server%29/#3-ssh-dienst-neu-starten","title":"3. SSH-Dienst neu starten","text":"<pre><code>sudo systemctl restart ssh\n</code></pre>"},{"location":"HowToSSH%28Server%29/#4-passwort-fur-benutzer-setzen","title":"4. Passwort f\u00fcr Benutzer setzen","text":"<p>Falls der Benutzer noch kein Passwort hat, kannst du eins vergeben:</p> <pre><code>sudo passwd dein-benutzername\n</code></pre>"},{"location":"HowToSSH%28Server%29/#5-verbindung-herstellen","title":"5. Verbindung herstellen","text":"<p>Von einem Client aus (Linux, macOS, Windows PowerShell/CMD):</p> <pre><code>ssh wiss@&lt;server-ip&gt;\n</code></pre> <p>Gib das gesetzte Passwort ein und du bist verbunden.</p>"},{"location":"HowToSSH%28Server%29/#hinweis","title":"\u26a0\ufe0f Hinweis","text":"<p>Die Anmeldung per Passwort ist einfach, aber weniger sicher als Public-Key-Authentifizierung. F\u00fcr produktive Systeme wird dringend empfohlen, stattdessen auf Public-Key-Login umzustellen.</p>"},{"location":"HowToSSH/","title":"SSH-Zugriff auf den Ubuntu-Server (f\u00fcr neue Benutzer)","text":"<p>Diese Anleitung zeigt, wie man von Linux oder Windows per SSH auf einen Server zugreift \u2013 inklusive OpenSSH-Installation und Anmeldung mit Passwor</p>"},{"location":"HowToSSH/#fur-linux","title":"F\u00fcr Linux","text":""},{"location":"HowToSSH/#1-openssh-client-installieren","title":"1. OpenSSH Client installieren","text":"<pre><code>sudo apt update\nsudo apt install openssh-client -y\n</code></pre> <p>Pr\u00fcfen, ob SSH installiert ist:</p> <pre><code>ssh -V\n</code></pre>"},{"location":"HowToSSH/#2-verbindung-mit-dem-server-herstellen","title":"2. Verbindung mit dem Server herstellen","text":"<p>bsp.</p> <pre><code>ssh wiss@31.XXX.XXX.XXX\n</code></pre>"},{"location":"HowToSSH/#fur-windows","title":"F\u00fcr Windows","text":""},{"location":"HowToSSH/#1-windows","title":"1. Windows","text":"<ol> <li>\u00d6ffne PowerShell oder CMD</li> <li>Verbinde dich mit dem Server:</li> </ol> <p>bsp.</p> <pre><code>ssh wiss@31.XXX.XXX.XXX\n</code></pre>"},{"location":"HowToSSH/#2-ssh-nicht-erkannt-wird","title":"2. <code>ssh</code> nicht erkannt wird","text":"<ol> <li>Gehe zu Einstellungen \u2192 Apps \u2192 Optionale Features</li> <li>Installiere OpenSSH Client</li> <li>Danach:</li> </ol> <p>bsp.</p> <pre><code>ssh wiss@31.XXX.XXX.XXX\n</code></pre>"},{"location":"HowToSSH/#3-mit-putty","title":"3. Mit PuTTY","text":"<ol> <li>Lade PuTTY herunter: https://www.putty.org/</li> <li>\u00d6ffne PuTTY</li> <li>Gib ein:</li> <li>Host Name: <code>31.XXX.XXX.XXX</code></li> <li>Port: <code>22</code></li> <li>Connection type: SSH</li> <li>Klicke auf Open</li> <li>Melde dich an:</li> <li>Benutzer: <code>wiss</code></li> <li>Passwort: <code>XXXX</code></li> </ol>"},{"location":"HowToSSH/#erfolgreiche-verbindung","title":"Erfolgreiche Verbindung","text":"<p>Wenn alles geklappt hat, erscheint:</p> <pre><code>Welcome to Ubuntu ...\n</code></pre> <p>Du bist nun per SSH mit dem Server verbunden.</p>"}]}